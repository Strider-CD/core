{"version":3,"sources":["../../lib/event-handlers/github.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,YAAY,QAAQ,QAAR,CAAhB;AACA,IAAI,SAAS,QAAQ,QAAR,CAAb;AACA,IAAI,SAAS,QAAQ,aAAR,EAAuB,MAAvB,CAAb;;AAEA,OAAO,OAAP,GAAiB,UAAU,OAAV,EAAmB,MAAnB,EAA2B;AAC1C,MAAI,SAAS,IAAI,SAAJ,CAAc;AACzB;AACA,aAAS,OAFgB;AAGzB;AACA,WAAO,IAJkB;AAKzB,cAAU,OALe;AAMzB,UAAM,OAAO,GAAP,CAAW,kBAAX,CANmB;AAOzB;AACA,aAAS,IARgB;AASzB,aAAS;AACP,oBAAc,aADP,CACqB;AADrB;AATgB,GAAd,CAAb;;AAcA,MAAI,cAAc,IAAlB;;AAEA,MAAI,OAAO,GAAP,CAAW,cAAX,CAAJ,EAAgC;AAC9B,kBAAc;AACZ,YAAM,OADM;AAEZ,aAAO,OAAO,GAAP,CAAW,cAAX;AAFK,KAAd;AAID,GALD,MAKO;AACL,kBAAc;AACZ,YAAM,OADM;AAEZ,WAAK,OAAO,GAAP,CAAW,YAAX,CAFO;AAGZ,cAAQ,OAAO,GAAP,CAAW,eAAX;AAHI,KAAd;AAKD;;AAED,UAAQ,EAAR,CAAW,sBAAX,EAAmC,YAAnC;AACA,UAAQ,EAAR,CAAW,qBAAX,EAAkC,WAAlC;AACA,UAAQ,EAAR,CAAW,wBAAX,EAAqC,cAArC;AACA,UAAQ,EAAR,CAAW,qBAAX,EAAkC,WAAlC;;AAEA,WAAS,YAAT,CAAuB,IAAvB,EAA6B,EAA7B,EAAiC;AAC/B,WAAO,YAAP,CAAoB,WAApB;AACA,WAAO,KAAP,CAAa,QAAb,CAAsB,EAAC,MAAM,KAAK,IAAZ,EAAkB,MAAM,KAAK,IAA7B,EAAtB,EAA0D,EAA1D;AACD;;AAED,WAAS,WAAT,CAAsB,IAAtB,EAA4B,EAA5B,EAAgC;AAC9B,WAAO,YAAP,CAAoB,WAApB;AACA,WAAO,KAAP,CAAa,OAAb,CAAqB;AACnB,YAAM,KADa;AAEnB,YAAM,KAAK,IAFQ;AAGnB,YAAM,KAAK,IAHQ;AAInB,cAAQ,CACN,MADM,EAEN,cAFM,CAJW;AAQnB,cAAQ;AACN;AACA;AACA,aAAM,IAAE,OAAO,OAAQ,KAAE,OAAO,SAAU,SAHpC;AAIN,sBAAc;AAJR;AARW,KAArB,EAcG,EAdH;AAeD;;AAED,WAAS,WAAT,CAAsB,IAAtB,EAA4B,EAA5B,EAAgC;AAC9B,WAAO,YAAP,CAAoB,WAApB;AACA,SAAK,KAAL,GAAa,mCAAmC,KAAK,KAAxC,CAAb;AACA,SAAK,OAAL,GAAe,mCAAf;AACA,SAAK,WAAL,GAAmB,yBAAyB,KAAK,KAA9B,CAAnB;AACA,WAAO,QAAP,CAAgB,MAAhB,CAAuB,IAAvB,EAA6B,EAA7B;AACD;;AAED,WAAS,cAAT,CAAyB,EAAzB,EAA6B,EAA7B,EAAiC;AAC/B;AACA,QAAI,GAAG,KAAH,KAAa,cAAjB,EAAiC;AAC/B;AACA;AACD;;AAED;;;;;;;;AAQA,QAAI,SAAS,GAAG,MAAhB;;AAEA,QAAI,WAAW,QAAX,IAAuB,WAAW,UAAlC,IAAgD,WAAW,aAA/D,EAA8E;AAC5E,aAAO,IAAP,CAAY,eAAZ,EAA6B,GAAG,KAAhC;AACA,4BAAsB,EAAtB,EAA0B,GAAG,KAA7B,EAAoC,EAApC;AACA;AACD,KAJD,MAIO,IAAI,WAAW,QAAf,EAAyB;AAC9B;AACA,SAAG,SAAH,EAAc,EAAd;AACA;AACD;;AAED,OAAG,SAAH,EAAc,EAAd,EA3B+B,CA2Bb;AAClB;AACD;;AAED,WAAS,qBAAT,CAAgC,EAAhC,EAAoC,IAApC,EAA0C,EAA1C,EAA8C;AAC5C,QAAI,MAAM;AACR,eAAS,GAAG,OADJ;AAER,mBAAa,KAFL;AAGR,wBAAkB,OAHV;AAIR,qBAAe,KAJP;AAKR,gBAAU,EALF;AAMR,cAAQ,EANA;AAOR,cAAQ,UAPA;AAQR,cAAQ,SARA;AASR,cAAQ,EATA;AAUR,cAAQ,EAVA;AAWR,eAAS,QAXD;AAYR,mBAAa;AACX,gBAAQ,IADG;AAEX,kBAAU,GAAG,MAFF;AAGX,iBAAS;AACP,kBAAQ;AACN,sBAAU,GAAG,IAAH,EAAS,IAAT,CAAc,KADlB;AAEN,mBAAO,GAAG,IAAH,EAAS,IAAT,CAAc;AAFf,WADD;AAKP,eAAK,GAAG,IAAH,EAAS,QALP;AAMP,mBAAS,GAAG,IAAH,EAAS;AANX,SAHE;AAWX,cAAM;AACJ,kBAAQ,GAAG,IAAH,EAAS,IAAT,CAAc,GADlB;AAEJ,sBAAY,GAAG,IAAH,EAAS,IAAT,CAAc,IAAd,CAAmB,SAF3B;AAGJ,eAAK,GAAG,IAAH,EAAS,IAAT,CAAc,GAHf;AAIJ,iBAAO,eAAe,GAAG,IAAH,EAAS,MAAxB,GAAiC,QAJpC;AAKJ,gBAAM,GAAG,IAAH,EAAS,IAAT,CAAc,IAAd,CAAmB,KAAnB,CAAyB,KAL3B;AAMJ,gBAAM,GAAG,IAAH,EAAS,IAAT,CAAc,IAAd,CAAmB,IANrB;AAOJ,eAAK,GAAG,IAAH,EAAS,IAAT,CAAc,GAPf;AAQJ,kBAAQ,GAAG,IAAH,EAAS;AARb;AAXK;AAZL,KAAV;AAmCA,YAAQ,IAAR,CAAa,mBAAb,EAAkC,GAAlC,EAAuC,UAAU,GAAV,EAAe,GAAf,EAAoB;AACzD,UAAI,GAAJ,EAAS,GAAG,GAAH,EAAT,KACK;AACH,uBAAe,GAAf,EAAoB,OAApB;AACA;AACD;AACF,KAND;AAOD;;AAED,WAAS,kCAAT,CAA6C,YAA7C,EAA2D;AACzD;AACA,QAAI,QAAQ,SAAZ;AACA,QAAI,aAAa,MAAb,KAAwB,SAA5B,EAAuC,QAAQ,SAAR;AACvC,QAAI,aAAa,MAAb,KAAwB,QAA5B,EAAsC,QAAQ,SAAR;AACtC,WAAO,KAAP;AACD;;AAED,WAAS,wBAAT,CAAmC,KAAnC,EAA0C;AACxC,QAAI,YAAY;AACd,iBAAW,kBADG;AAEd,iBAAW,8BAFG;AAGd,iBAAW;AAHG,KAAhB;AAKA,WAAO,UAAU,KAAV,CAAP;AACD;;AAED,WAAS,cAAT,CAAyB,GAAzB,EAA8B,OAA9B,EAAuC;AACrC,QAAI,IAAI,OAAJ,KAAgB,QAApB,EAA8B;AAC5B,UAAI,QAAQ,IAAI,WAAJ,CAAgB,IAAhB,CAAqB,UAArB,CAAgC,KAAhC,CAAsC,GAAtC,EAA2C,CAA3C,CAAZ;AACA,UAAI,WAAW,IAAI,WAAJ,CAAgB,IAAhB,CAAqB,UAArB,CAAgC,KAAhC,CAAsC,GAAtC,EAA2C,CAA3C,CAAf;AACA,UAAI,eAAe;AACjB,cAAM,KADW;AAEjB,cAAM,QAFW;AAGjB,aAAK,IAAI,WAAJ,CAAgB,IAAhB,CAAqB,GAHT;AAIjB,eAAO;AACL,kBAAQ,IAAI,MADP;AAEL,kBAAQ,IAAI;AAFP,SAJU;AAQjB,oBAAa,IAAE,OAAO,UAAW,eAAY,IAAI,OAAQ,WAAQ,IAAI,EAAG;AARvD,OAAnB;AAUA,cAAQ,IAAR,CAAa,qBAAb,EAAoC,YAApC,EAAkD,UAAU,GAAV,EAAe,GAAf,EAAoB;AACpE,YAAI,GAAJ,EAAS,OAAO,KAAP,CAAa,yCAAb,EAAwD,GAAxD,EAAT,KACK,OAAO,KAAP,CAAa,wBAAb,EAAuC,GAAvC;AACN,OAHD;AAID;AACF;AACF,CApLD","file":"github.js","sourcesContent":["'use strict'\n\nvar GitHubApi = require('github')\nvar config = require('config')\nvar logger = require('../util/log')(module)\n\nmodule.exports = function (emitter, client) {\n  var github = new GitHubApi({\n    // required\n    version: '3.0.0',\n    // optional\n    debug: true,\n    protocol: 'https',\n    host: config.get('github.apiServer'),\n    // pathPrefix: null, // for some GHEs; none for GitHub\n    timeout: 5000,\n    headers: {\n      'user-agent': 'strider-cd2' // GitHub is happy with a unique user agent\n    }\n  })\n\n  var authDetails = null\n\n  if (config.get('github.token')) {\n    authDetails = {\n      type: 'oauth',\n      token: config.get('github.token')\n    }\n  } else {\n    authDetails = {\n      type: 'oauth',\n      key: config.get('github.key'),\n      secret: config.get('github.secret')\n    }\n  }\n\n  emitter.on('github.webhooks.list', webhooksList)\n  emitter.on('github.webhooks.set', webhooksSet)\n  emitter.on('github.webhooks.handle', webhooksHandle)\n  emitter.on('github.pr.setStatus', prSetStatus)\n\n  function webhooksList (data, cb) {\n    github.authenticate(authDetails)\n    github.repos.getHooks({user: data.user, repo: data.repo}, cb)\n  }\n\n  function webhooksSet (data, cb) {\n    github.authenticate(authDetails)\n    github.repos.setHook({\n      name: 'web',\n      user: data.user,\n      repo: data.repo,\n      events: [\n        'push',\n        'pull_request'\n      ],\n      config: {\n        // set STRIDER_URL_BASE to something like \"http://foo.bar\" (not that\n        // there is no trailing slash)\n        url: `${config.baseUrl}${config.apiPrefix}github`,\n        content_type: 'json'\n      }\n    }, cb)\n  }\n\n  function prSetStatus (data, cb) {\n    github.authenticate(authDetails)\n    data.state = githubStatusFromJobStatusAndResult(data.state)\n    data.context = 'continous-integration/strider-cd2'\n    data.description = commitStateToDescription(data.state)\n    github.statuses.create(data, cb)\n  }\n\n  function webhooksHandle (pr, cb) {\n    // we are only handling pull requests for now\n    if (pr.event !== 'pull_request') {\n      cb()\n      return\n    }\n\n    /*\n    * For details regarding actions see:\n    * https://developer.github.com/v3/activity/events/types/#pullrequestevent\n    *\n    * List of possible actions:\n    * “assigned”, “unassigned”, “labeled”, “unlabeled”, “opened”, “closed”,\n    * “reopened”, “synchronize”.\n    */\n    var action = pr.action\n\n    if (action === 'opened' || action === 'reopened' || action === 'synchronize') {\n      logger.info('got new job: ', pr.event)\n      createJobFromGithubPr(pr, pr.event, cb)\n      return\n    } else if (action === 'closed') {\n      // TODO: check if we have enqueued / running jobs for this PR and stop them\n      cb(undefined, {})\n      return\n    }\n\n    cb(undefined, {}) // the API server is not interested in any answer\n    return\n  }\n\n  function createJobFromGithubPr (pr, type, cb) {\n    var job = {\n      project: pr.project,\n      hasChildren: false,\n      requiredResource: 'linux',\n      allowedToFail: false,\n      children: {},\n      parent: '',\n      status: 'received',\n      result: 'pending',\n      stdout: {},\n      stderr: {},\n      trigger: 'github',\n      triggerInfo: {\n        'type': type,\n        'action': pr.action,\n        general: {\n          author: {\n            username: pr[type].user.login,\n            image: pr[type].user.avatar_url\n          },\n          url: pr[type].html_url,\n          message: pr[type].title\n        },\n        data: {\n          branch: pr[type].base.ref,\n          branchBase: pr[type].base.repo.full_name,\n          ref: pr[type].head.ref,\n          fetch: 'refs/pull/' + pr[type].number + '/merge',\n          user: pr[type].head.repo.owner.login,\n          repo: pr[type].head.repo.name,\n          sha: pr[type].head.sha,\n          number: pr[type].number\n        }\n      }\n    }\n    emitter.emit('jobs.queue.insert', job, function (err, res) {\n      if (err) cb(err)\n      else {\n        notifyProvider(job, emitter)\n        cb()\n      }\n    })\n  }\n\n  function githubStatusFromJobStatusAndResult (statusResult) {\n    // can be either: pending, success, error or failure\n    var state = 'pending'\n    if (statusResult.result === 'success') state = 'success'\n    if (statusResult.result === 'failed') state = 'failure'\n    return state\n  }\n\n  function commitStateToDescription (state) {\n    let stateDesc = {\n      'pending': 'Awaiting results',\n      'success': 'The Strider CD build passed ',\n      'failure': 'The Strider CD build failed!'\n    }\n    return stateDesc[state]\n  }\n\n  function notifyProvider (job, emitter) {\n    if (job.trigger === 'github') {\n      let owner = job.triggerInfo.data.branchBase.split('/')[0]\n      let baseRepo = job.triggerInfo.data.branchBase.split('/')[1]\n      let notification = {\n        user: owner,\n        repo: baseRepo,\n        sha: job.triggerInfo.data.sha,\n        state: {\n          status: job.status,\n          result: job.result\n        },\n        target_url: `${config.striderUrl}/projects/${job.project}/jobs/${job.id}`\n      }\n      emitter.emit('github.pr.setStatus', notification, function (err, res) {\n        if (err) logger.debug('notifyProvider setting PR status failed', err)\n        else logger.debug('notifyProvider success', res)\n      })\n    }\n  }\n}\n"]}