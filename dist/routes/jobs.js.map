{"version":3,"sources":["../../lib/routes/jobs.js"],"names":[],"mappings":"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","file":"jobs.js","sourcesContent":["'use strict'\n\nvar config = require('config')\nvar ReadWriteLock = require('rwlock')\nvar JWT = require('jsonwebtoken')\nvar Job = require('../models/job')\nvar Drone = require('../models/drone')\nvar jobsPath = config.apiPrefix + 'jobs'\n\nmodule.exports = function (emitter) {\n  var retrieveLock = new ReadWriteLock()\n\n  return [{\n    path: `${jobsPath}/{query*3}`,\n    method: 'GET',\n    handler (request, reply) {\n      var splitQuery = request.params.query.split('/')\n      var query = {}\n      var cmpOperatorValuePair = {}\n\n      // request pattern is ..jobs/<field in job>/< compare operator (see loki docs)>/<value>\n      // TODO: shorten this\n      let fieldInJob = splitQuery[0]\n      let cmpOperator = `\\$${splitQuery[1]}`\n      let value = splitQuery[2]\n      value = transformValue(value)\n      cmpOperatorValuePair[cmpOperator] = value\n\n      query[fieldInJob] = cmpOperatorValuePair\n      Job.findByQuery(query).then(function (list) {\n        reply(list.slice(Math.max(list.length - 100, 0))) // reply only the newest 100 entries\n      }).then(null, function (err) {\n        reply(err).code(400)\n      })\n    }\n  }, {\n    path: `${jobsPath}/{query*2}`,\n    method: 'GET',\n    handler (request, reply) {\n      var splitQuery = request.params.query.split('/')\n      var query = {}\n\n      query[splitQuery[0]] = splitQuery[1]\n\n      Job.findByQuery(query).then(function (list) {\n        reply(list.slice(Math.max(list.length - 100, 0))) // reply only the newest 100 entries\n      }).then(null, function (err) {\n        reply(err).code(400)\n      })\n    }\n  }, {\n    path: jobsPath,\n    method: 'GET',\n    handler (request, reply) {\n      Job.findByQuery({}).then(function (list) {\n        reply(list)\n      }).then(null, function (err) {\n        reply(err).code(400)\n      })\n    }\n  }, {\n    path: `${jobsPath}/retrieve`,\n    method: 'GET',\n    handler (request, reply) {\n      var filter = {requiredResource: 'linux'}\n\n      retrieveLock.writeLock(function (release) {\n        emitter.emit('jobs.queue.getWithFilter', filter, function (err, results) {\n          if (err) {\n            console.error('Jobs GET retrieve error', err)\n            reply('').code(400) // most likely malformed query\n          } else if (results === '') {\n            reply('').code(503) // no jobs in the queue; come back latter (not sure about this one)\n          } else {\n            reply(results)\n          }\n          release()\n        })\n      })\n    }\n  }, {\n    path: `${jobsPath}/retrieve`,\n    method: 'POST',\n    handler (request, reply) {\n      var filter = request.payload\n\n      try {\n        var decoded = JWT.verify(request.headers.authorization, config.jwtSecret)\n        Drone.update(decoded.parent, { platform: filter.requiredResource })\n          .then((data) => console.log('Updated drone specs'))\n          .catch((error) => console.error('Drone update error:', error))\n      } catch (e) {\n        console.error(e)\n      }\n\n      retrieveLock.writeLock(function (release) {\n        emitter.emit('jobs.queue.getWithFilter', filter, function (err, results) {\n          if (err) {\n            console.error('Jobs POST retrieve error', err)\n            reply('').code(400) // most likely malformed query\n          } else if (results === '') {\n            reply('').code(503) // no jobs in the queue; come back latter (not sure about this one)\n          } else {\n            reply(results)\n          }\n          release()\n        })\n      })\n    }\n  }, {\n    path: `${jobsPath}/id/{id}`,\n    method: 'PUT',\n    handler (request, reply) {\n      var job = request.payload\n      job.id = request.params.id\n      emitter.emit('jobs.job.update', job, function (err, results) {\n        if (err) reply('').code(400) // most likely malformed query\n        else reply(results)\n      })\n    }\n  }, {\n    path: config.apiPrefix + 'jobs',\n    method: 'POST',\n    handler (request, reply) {\n      var job = request.payload\n      if (job._id) job._id = undefined\n\n      emitter.emit('jobs.queue.insert', job, function (err, results) {\n        if (err) reply('').code(400) // most likely malformed query\n        else reply(results)\n      })\n    }\n  }]\n}\n\nfunction isNumeric (n) {\n  return !isNaN(parseFloat(n)) && isFinite(n)\n}\n\nfunction transformValue (val) {\n  if (config.dbType === 'mongodb' && typeof val === 'string') {\n    if (isNumeric(val)) {\n      return parseFloat(val)\n    }\n  }\n  return val\n}\n"]}