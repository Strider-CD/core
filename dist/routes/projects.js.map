{"version":3,"sources":["../../lib/routes/projects.js"],"names":[],"mappings":"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","file":"projects.js","sourcesContent":["'use strict'\n\nvar Joi = require('joi')\nvar config = require('config')\nvar Project = require('../models/project')\nvar Environment = require('../models/environment')\nvar Job = require('../models/job')\nvar projectPath = config.apiPrefix + 'projects'\n\nmodule.exports = function (emitter) {\n  return [{\n    path: `${projectPath}`,\n    method: 'GET',\n    config: {\n      auth: false\n    },\n    handler (request, reply) {\n      Project.findByQuery({}).then(function (list) {\n        reply(list)\n      }).then(null, function (err) {\n        reply(err).code(503)\n      })\n    }\n  }, {\n    path: `${projectPath}/{id}`,\n    method: 'GET',\n    config: {\n      auth: false,\n      validate: {\n        params: Joi.object().keys({\n          id: Joi.string().guid() // GUID are very similar to UUID\n        })\n      }\n    },\n    handler (request, reply) {\n      var id = request.params.id\n      Project.findByQuery({'id': id}).then(function (list) {\n        if (list.length > 0) {\n          reply(list[0])\n        } else {\n          reply()\n        }\n      }).then(null, function (err) {\n        reply(err).code(503)\n      })\n    }\n  }, {\n    path: `${projectPath}`,\n    method: 'POST',\n    handler (request, reply) {\n      var project = request.payload\n\n      Project.save(project)\n        .then((id) => {\n          reply(id)\n        })\n        .catch((error) => reply(error).code(500))\n    }\n  }, {\n    path: `${projectPath}/{id}/environments`,\n    method: 'GET',\n    handler (request, reply) {\n      var id = request.params.id\n\n      Project.findOneById(id).then(function (project) {\n        if (project.environments && project.environments.length) {\n          Environment.findByQuery('id', { '$in': project.environments }).then(function (list) {\n            reply(list)\n          })\n          .catch(function (error) {\n            reply(error).code(500)\n          })\n        } else {\n          reply([])\n        }\n      })\n    }\n  }, {\n    path: `${projectPath}/{id}/webhooks/rest`,\n    method: 'POST',\n    config: {\n      validate: {\n        params: Joi.object().keys({\n          id: Joi.string().guid() // GUID are very similar to UUID\n        })\n      }\n    },\n    handler (request, reply) {\n      var id = request.params.id\n      var payload = request.payload\n      payload['project'] = id\n\n      // TODO: check whether the project exists + check if the provider is associated with the project\n      reply('rest: not Implemented yet!').code(501)\n    }\n  }, {\n    path: `${projectPath}/{id}/webhooks/{providerId}`,\n    method: 'POST',\n    config: {\n      auth: false,\n      validate: {\n        params: Joi.object().keys({\n          providerId: Joi.string()\n            .only('github', 'bitbucket', 'gitlab'),\n          id: Joi.string().guid() // GUID are very similar to UUID\n        })\n      }\n    },\n    handler (request, reply) {\n      var providerId = request.params.providerId\n      var id = request.params.id\n      var payload = request.payload\n\n      payload['project'] = id\n\n      // TODO: check whether the project exists + check if the provider is associated with the project\n\n      switch (providerId) {\n        case 'github':\n          // TODO: Github specific json validation (at least for PR's and master merges)\n          // TODO: Test whether the request comes from github -> abort if not\n          payload['event'] = request.headers['x-github-event']\n\n          emitter.emit(`${providerId}.webhooks.handle`, payload, function (err, results) {\n            if (err) reply() // Github will never be interested in our status or any reply\n            else reply()\n          })\n          break\n        case 'bitbucket':\n          reply(`${providerId}: not Implemented yet!`).code(501)\n          break\n        case 'gitlab':\n          reply(`${providerId}: not Implemented yet!`).code(501)\n          break\n        case 'rest':\n          reply(`${providerId}: not Implemented yet!`).code(501)\n          break\n      }\n    }\n  }, {\n    path: `${projectPath}/{id}/jobs/{query*3}`,\n    method: 'GET',\n    handler (request, reply) {\n      // TODO: get rid of code duplication (see projects.js routes)\n      var id = request.params.id\n      var splitQuery = request.params.query.split('/')\n      splitQuery = splitQuery.slice(Math.max(splitQuery.length - 3, 0)) // last three elements\n      var query = {}\n      var cmpOperatorValuePair = {}\n\n      // request pattern is ..jobs/<field in job>/< compare operator (see loki docs)>/<value>\n      // TODO: shorten this\n      let fieldInJob = splitQuery[0]\n      let cmpOperator = `\\$${splitQuery[1]}`\n      let value = splitQuery[2]\n      cmpOperatorValuePair[cmpOperator] = value\n      query[fieldInJob] = cmpOperatorValuePair\n      Job.findByQuery({'$and': [{project: id}, query]}).then(function (list) {\n        reply(list.slice(Math.max(list.length - 100, 0))) // reply only the newest 100 entries\n      }).then(null, function (err) {\n        reply(err).code(400)\n      })\n    }\n  }, {\n    path: `${projectPath}/{id}/jobs/{query*2}`,\n    method: 'GET',\n    handler (request, reply) {\n      // TODO: get rid of code duplication (see projects.js routes)\n      var id = request.params.id\n      var splitQuery = request.params.query.split('/')\n      splitQuery = splitQuery.slice(Math.max(splitQuery.length - 2, 0)) // last two elements\n      var query = {}\n\n      query[splitQuery[0]] = splitQuery[1]\n\n      Job.findByQuery({'$and': [{project: id}, query]}).then(function (list) {\n        reply(list.slice(Math.max(list.length - 100, 0))) // reply only the newest 100 entries\n      }).then(null, function (err) {\n        reply(err).code(400)\n      })\n      emitter.emit('jobs.frontend.getByQuery', {'$and': [{project: id}, {parent: ''}, query]}, function (err, results) {\n        if (err) {\n          reply('').code(400) // most likely malformed query\n        } else {\n          reply(results)\n        }\n      })\n    }\n  }, {\n    path: `${projectPath}/{id}/jobs/id/{jobId}`,\n    method: 'GET',\n    handler (request, reply) {\n      // TODO: get rid of code duplication (see projects.js routes)\n      var id = request.params.id\n      var jobId = request.params.jobId\n      /*\n      Job.findByQuery({'$and': [{project: id}, {id: jobId}]}).then(function (list) {\n        reply(list.slice(Math.max(list.length - 100, 0))) // reply only the newest 100 entries\n      }).then(null, function (err) {\n        reply(err).code(400)\n      })\n      */\n      emitter.emit('jobs.frontend.getByQuery', {'$and': [{project: id}, {id: jobId}]}, function (err, results) {\n        if (err) {\n          reply('').code(400) // most likely malformed query\n        } else {\n          reply(results)\n        }\n      })\n    }\n  }, {\n    path: `${projectPath}/{id}/jobs`,\n    method: 'GET',\n    config: {\n      auth: false\n    },\n    handler (request, reply) {\n      var id = request.params.id\n      // TODO: get rid of code duplication (see projects.js routes)\n      var currentTime = new Date().getTime() - 2 * 24 * 60 * 60 * 1000\n\n      emitter.emit('jobs.frontend.getByQuery', {'$and': [{project: id}, {parent: ''}, {receivedAt: {$gt: currentTime}}]}, function (err, results) {\n        if (err) {\n          reply('').code(400) // most likely malformed query\n        } else {\n          reply(results)\n        }\n      })\n      /*\n      Job.findByQuery({'$and': [{project: id}, {parent: ''}]}).then(function (list) {\n        reply(list.slice(Math.max(list.length - 100, 0))) // reply only the newest 100 entries\n      }).then(null, function (err) {\n        reply(err).code(400)\n      })\n      */\n    }\n  }]\n}\n"]}