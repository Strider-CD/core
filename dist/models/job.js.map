{"version":3,"sources":["../../lib/models/job.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,MAAM,QAAQ,KAAR,CAAV;AACA,IAAI,qBAAqB,QAAQ,uBAAR,CAAzB;AACA,IAAI,SAAS,QAAQ,QAAR,CAAb;AACA,IAAI,mBAAmB,QAAQ,qBAAR,CAAvB;AACA,IAAI,SAAS,IAAI,MAAJ,GAAa,IAAb,CAAkB;AAC7B,MAAI,IAAI,MAAJ,EADyB;AAE7B,oBAAkB,IAAI,MAAJ,EAFW;AAG7B,iBAAe,IAAI,OAAJ,GAAc,QAAd,EAHc;AAI7B,cAAY,IAAI,MAAJ,EAJiB;AAK7B,eAAa,IAAI,OAAJ,GAAc,QAAd,EALgB;AAM7B,YAAU,IAAI,MAAJ,GAAa,IAAb,CAAkB,EAAlB,EAAsB,QAAtB,EANmB;AAO7B,UAAQ,IAAI,MAAJ,GAAa,KAAb,CAAmB,EAAnB,EAAuB,QAAvB,EAPqB;AAQ7B,UAAQ,IAAI,MAAJ,GAAa,IAAb,CAAkB,CACxB,UADwB,EACZ,SADY,EACD,UADC,EACW,SADX,EACsB,WADtB,CAAlB,EAEL,QAFK,EARqB;AAW7B,UAAQ,IAAI,MAAJ,GAAa,IAAb,CAAkB,CACxB,SADwB,EACb,QADa,EACH,SADG,CAAlB,EAEL,QAFK,EAXqB;AAc7B,UAAQ,IAAI,MAAJ,GAAa,IAAb,CAAkB,EAAlB,EAAsB,QAAtB,EAdqB;AAe7B,UAAQ,IAAI,MAAJ,GAAa,IAAb,CAAkB,EAAlB,EAAsB,QAAtB,EAfqB;AAgB7B,WAAS,IAAI,MAAJ,GAAa,IAAb,CAAkB,CACzB,QADyB,EACf,QADe,EACL,MADK,CAAlB,EAEN,QAFM,EAhBoB;AAmB7B,cAAY,IAAI,MAAJ,EAnBiB;AAoB7B,aAAW,IAAI,MAAJ,EApBkB;AAqB7B,gBAAc,IAAI,MAAJ,EArBe;AAsB7B,eAAa,IAAI,MAAJ,GAAa,IAAb,CAAkB,EAAlB,EAAsB,QAAtB,EAtBgB,CAsBiB;AAtBjB,CAAlB,CAAb;;IAyBM,kB,GAAN,MAAM,kBAAN,SAAiC,gBAAjC,CAAkD,E;IAG5C,sB,GAAN,MAAM,sBAAN,SAAqC,kBAArC,CAAwD,E;;;AAGxD,IAAI,OAAO,MAAP,KAAkB,SAAtB,EAAiC;AAC/B,SAAO,OAAP,GAAiB,IAAI,sBAAJ,CAA2B,MAA3B,CAAjB;AACD,CAFD,MAEO;AACL,SAAO,OAAP,GAAiB,IAAI,kBAAJ,CAAuB,MAAvB,CAAjB;AACD","file":"job.js","sourcesContent":["'use strict'\n\nvar Joi = require('joi')\nvar MongooseCollection = require('./mongoose-collection')\nvar config = require('config')\nvar SimpleCollection = require('./simple-collection')\nvar schema = Joi.object().keys({\n  id: Joi.string(),\n  requiredResource: Joi.string(),\n  allowedToFail: Joi.boolean().required(),\n  project_id: Joi.string(),\n  hasChildren: Joi.boolean().required(),\n  children: Joi.object().keys({}).required(),\n  parent: Joi.string().allow('').required(),\n  status: Joi.string().only([\n    'received', 'running', 'finished', 'aborted', 'restarted'\n  ]).required(),\n  result: Joi.string().only([\n    'pending', 'failed', 'success'\n  ]).required(),\n  stdout: Joi.object().keys({}).required(),\n  stderr: Joi.object().keys({}).required(),\n  trigger: Joi.string().only([\n    'github', 'gitlab', 'rest'\n  ]).required(),\n  receivedAt: Joi.number(),\n  updatedAt: Joi.number(),\n  runningSince: Joi.number(),\n  triggerInfo: Joi.object().keys({}).required() // github pr refs, rest user info etc.\n})\n\nclass JobsCollectionLoki extends SimpleCollection {\n}\n\nclass JobsCollectionMongoose extends MongooseCollection {\n}\n\nif (config.dbType === 'mongodb') {\n  module.exports = new JobsCollectionMongoose(schema)\n} else {\n  module.exports = new JobsCollectionLoki(schema)\n}\n"]}