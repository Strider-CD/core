{"version":3,"sources":["../../lib/primus-handlers/joinLeave.js"],"names":[],"mappings":";;AAAA,IAAI,SAAS,QAAQ,aAAR,EAAuB,MAAvB,CAAb;AACA,IAAI,SAAS,QAAQ,QAAR,CAAb;;AAEA,OAAO,OAAP,GAAiB,UAAU,KAAV,EAAiB,IAAjB,EAAuB;AACtC,MAAI,KAAK,IAAL,KAAc,MAAlB,EAA0B;AACxB,UAAM,IAAN,CAAW,KAAK,IAAhB,EAAsB,YAAY;AAChC,YAAM,IAAN,CAAW,KAAK,IAAhB,EAAsB,OAAtB,CAA8B,UAAU,GAAV,EAAe,OAAf,EAAwB;AACpD,YAAI,CAAE,OAAF,IAAc,GAAlB,EAAuB;AACrB,iBAAO,KAAP,CAAa,gCAAb,EAA+C,GAA/C;AACA;AACD;AACD,YAAI,OAAO,QAAP,CAAgB,OAAhB,EAAyB,MAAM,EAA/B,CAAJ,EAAwC;AACtC,iBAAO,KAAP,CAAc,mBAAiB,MAAM,EAAG,mBAAgB,KAAK,IAAK,GAAlE;AACA,gBAAM,KAAN,CAAY,EAAC,MAAM,KAAK,IAAZ,EAAkB,MAAM,MAAxB,EAAgC,KAAK,EAAC,QAAQ,SAAT,EAArC,EAAZ;AACD,SAHD,MAGO;AACL,iBAAO,IAAP,CAAa,mBAAiB,MAAM,EAAG,qCAAkC,KAAK,IAAK,aAAnF,EAAgG,GAAhG;AACA,gBAAM,KAAN,CAAY,EAAC,MAAM,KAAK,IAAZ,EAAkB,MAAM,MAAxB,EAAgC,KAAK,EAAC,QAAQ,QAAT,EAArC,EAAZ;AACD;AACF,OAZD;AAaD,KAdD;AAeD,GAhBD,MAgBO,IAAI,KAAK,IAAL,KAAc,OAAlB,EAA2B;AAChC,UAAM,KAAN,CAAY,KAAK,IAAjB,EAAuB,YAAY;AACjC,aAAO,KAAP,CAAc,mBAAiB,MAAM,EAAG,iBAAc,KAAK,IAAK,GAAhE;AACA,YAAM,KAAN,CAAY,EAAC,MAAM,KAAK,IAAZ,EAAkB,MAAM,OAAxB,EAAiC,KAAK,EAAC,QAAQ,SAAT,EAAtC,EAAZ;AACD,KAHD;AAID;AACF,CAvBD","file":"joinLeave.js","sourcesContent":["var logger = require('../util/log')(module)\nvar lodash = require('lodash')\n\nmodule.exports = function (spark, data) {\n  if (data.type === 'join') {\n    spark.join(data.room, function () {\n      spark.room(data.room).clients(function (err, clients) {\n        if (!(clients) || err) {\n          logger.debug('No clients in room after join!', err)\n          return\n        }\n        if (lodash.contains(clients, spark.id)) {\n          logger.debug(`spark with id: ${spark.id} joined room: ${data.room}`)\n          spark.write({room: data.room, type: 'join', msg: {status: 'success'}})\n        } else {\n          logger.warn(`spark with id: ${spark.id} tried but COULD NOT join room: ${data.room} because: `, err)\n          spark.write({room: data.room, type: 'join', msg: {status: 'failed'}})\n        }\n      })\n    })\n  } else if (data.type === 'leave') {\n    spark.leave(data.room, function () {\n      logger.debug(`spark with id: ${spark.id} left room: ${data.room}`)\n      spark.write({room: data.room, type: 'leave', msg: {status: 'success'}})\n    })\n  }\n}\n"]}