{"version":3,"sources":["../../lib/primus-handlers/droneOutput.js"],"names":[],"mappings":"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","file":"droneOutput.js","sourcesContent":["var Joi = require('joi')\nvar logger = require('../util/log')(module)\nvar Job = require('../models/job')\nvar config = require('config')\n\nvar msgSchema = Joi.object().keys({\n  line: Joi.string().required(),\n  lineNumber: Joi.number().required()\n})\n\nmodule.exports = function (spark, data) {\n  Joi.validate(data.msg, msgSchema, function (err, res) {\n    if (err) {\n      logger.warn('Malformed drone output received', err)\n      return\n    }\n    var decodedToken = spark.request.decoded_token\n    if (decodedToken) {\n      if (decodedToken.type !== 'drone') {\n        logger.warn('Someone other than a drone tried to write to a room!')\n        return\n      }\n    } else {\n      logger.warn('Missing auth token!')\n      return\n    }\n    let room = data.room\n    if (~spark.rooms().indexOf(room)) {\n      logger.debug(`received ${data.type} from ${spark.id}: ${data.msg.line}`)\n      spark.room(room).clients(function (err, clients) {\n        if (err) logger.debug('Cannot access primus room', err)\n        updateJobOutput(data)\n        spark.room(room).except(spark.id).write(createClientMessage(data))\n      })\n    }\n  })\n}\n\nfunction createClientMessage (data) {\n  return {room: data.room, type: data.type, msg: {line: data.msg.line, lineNumber: data.msg.lineNumber}}\n}\n\nfunction updateJobOutput (data) {\n  if (config.dbType === 'mongodb' && (data.type === 'stdout' || data.type === 'stderr')) {\n    var job = {}\n    if (data.type === 'stdout') {\n      job.stdout = {}\n      job.stdout[data.msg.lineNumber] = data.msg.line\n    } else if (data.type === 'stderr') {\n      job.stderr = {}\n      job.stderr[data.msg.lineNumber] = data.msg.line\n    }\n    Job.updateDiff(data.room, job)\n    return\n  }\n\n  Job.findById(data.room).then(function (list) {\n    if (list.length > 0) {\n      var job = list[0]\n      if (data.type === 'stdout') {\n        job.stdout[data.msg.lineNumber] = data.msg.line\n      } else if (data.type === 'stderr') {\n        job.stderr[data.msg.lineNumber] = data.msg.line\n      }\n      Job.update(data.room, job).then(function (id) {\n        logger.debug(`Updated output for job with id ${id}`)\n      }).then(null, function (err) {\n        logger.debug(`Unable to update job with id ${data.room} ${err}`)\n      })\n    }\n  }).then(null, function (err) {\n    logger.warn(`Unable to find job with id ${data.room} ${err}`)\n  })\n}\n"]}